# Alacritty
###########
# vi:ft=yaml
#
#   'r>>>>|||?\\\llssxxti%***TTYY)Jzo11111aae43ja~
# ~ZR8BBBBBBBBBBBBBBBBBBBBBB0000000000000000Q0QQQBZ~
# BBB8mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm8BBB
# 888r..................``````..................r888
# DDD,.````````````````:r>>>>r:'```````````````.,DDD
# mmm,.```````````````_r>>>>>>r_```````````````.,mmm
# AAA,.``````````````-r\\\\\\\\r-``````````````.,AAA
# KKK,.`````````````'"llll\\llll"'`````````````.,KKK
# qqq,.````````````'!\\\\|~~|\\\\!'````````````.,qqq
# yyy,.```````````'~sttts!''!sttts~'```````````.,yyy
# hhh,.```````````:s***%"_^^_"%***s~```````````.,hhh
# ]]],.``````````->%%%%r_"BB"_r%%%%|-``````````.,]]]
# jjj,.`````````-r))))?_,D@@D,_>))))r-`````````.,jjj
# aaa,.````````'"o111t::jg@@gj::t111o"'````````.,aaa
# 111,.```````'!YJJJi~'~h8WW8h~'~iJJJY!'```````.,111
# YYY,.```````:Y111z!'`-\w88w\-`'!z111Y~```````.,YYY
# ***,.``````:*333e"'```:1hh1:```'"a333Y:``````.,***
# xxx,.`````-|aaaa>'````'"ee"'````'raaaa|-`````.,xxx
# \\\,.`````'!""",'``````:%%_``````',"""!'`````.,\\\
# |||,.``````````````````'!!'``````````````````.,|||
# rrr>::::::::::::::::::::::::::::::::::::::::::>rrr
# !rrrr>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>rrrr!
#

background_opacity: 1.0

window:
  # Allow terminal applications to change Alacritty's window title.
  dynamic_title: true
  padding:
    x: 0
    y: 0
  # Spread additional padding evenly around the terminal content.
  dynamic_padding: true
  decorations: full
  startup_mode: Windowed
  # Window title
  title: Alacritty
  class:
    # Application instance name
    instance: Alacritty
    # General application class
    general: Alacritty
  gtk_theme_variant: None

scrolling:
  history: 0
  # Number of lines the viewport will move for every line scrolled when
  # scrollback is enabled (history > 0).
  multiplier: 3

font:
  normal:
    family: {def-font}
    # The `style` can be specified to pick a specific face.
    # style: Regular
  # Bold font face
  #bold:
  #  # Font family
  #  #
  #  # If the bold family is not specified, it will fall back to the
  #  # value specified for the normal font.
  #  family: Fantasque Sans Mono Nerd Font
  #  # The `style` can be specified to pick a specific face.
  #  style: Bold
  # Italic font face
  #italic:
  #  # Font family
  #  #
  #  # If the italic family is not specified, it will fall back to the
  #  # value specified for the normal font.
  #  family: Fantasque Sans Mono Nerd Font
  #  # The `style` can be specified to pick a specific face.
  #  style: Italic
  # Bold italic font face
  #bold_italic:
  #  # Font family
  #  #
  #  # If the bold italic family is not specified, it will fall back to the
  #  # value specified for the normal font.
  #  family: Fantasque Sans Mono Nerd Font
  #  # The `style` can be specified to pick a specific face.
  #  style: Bold Italic
  size: 9.5
  # Offset is the extra space around each character. `offset.y` can be thought of
  # as modifying the line spacing, and `offset.x` as modifying the letter spacing.
  offset:
    x: 0
    y: 0
  # Glyph offset determines the locations of the glyphs within their cells with
  # the default being at the bottom. Increasing `x` moves the glyph to the right,
  # increasing `y` moves the glyph upwards.
  glyph_offset:
    x: 0
    y: 0

# If `true`, bold text is drawn using the bright color variants.
draw_bold_text_with_bright_colors: false

colors:
  # Default colors
  primary:
    background: '{color0}'
    foreground: '{color7}'
    # Bright and dim foreground colors
    #
    # The dimmed foreground color is calculated automatically if it is not present.
    # If the bright foreground color is not set, or `draw_bold_text_with_bright_colors`
    # is `false`, the normal foreground color will be used.
    # dim_foreground: '#9a9a9a'
    # bright_foreground: '#ffffff'
  # Cursor colors
  #
  # Colors which should be used to draw the terminal cursor. If these are unset,
  # the cursor color will be the inverse of the cell color.
  cursor:
    text: '#000000'
    cursor: '#ffffff'
  # Selection colors
  #
  # Colors which should be used to draw the selection area. If selection
  # background is unset, selection color will be the inverse of the cell colors.
  # If only text is unset the cell text color will remain the same.
  selection:
    text: '#eaeaea'
    background: '#404040'
  normal:
    black:   '{color0}'
    red:     '{color1}'
    green:   '{color2}'
    yellow:  '{color3}'
    blue:    '{color4}'
    magenta: '{color5}'
    cyan:    '{color6}'
    white:   '{color7}'
  bright:
   black:   '{color8}'
   red:     '{color9}'
   green:   '{color10}'
   yellow:  '{color11}'
   blue:    '{color12}'
   magenta: '{color13}'
   cyan:    '{color14}'
   white:   '{color15}'
  # Indexed Colors
  #
  # The indexed colors include all colors from 16 to 256.
  # When these are not set, they're filled with sensible defaults.
  #
  # Example:
  #   `- {{ index: 16, color: '#ff00ff' }}`
  #
  #indexed_colors: []

# Visual Bell
#
# Any time the BEL code is received, Alacritty "rings" the visual bell. Once
# rung, the terminal background will be set to white and transition back to the
# default background color. You can control the rate of this transition by
# setting the `duration` property (represented in milliseconds). You can also
# configure the transition function by setting the `animation` property.
#
# Values for `animation`:
#   - Ease
#   - EaseOut
#   - EaseOutSine
#   - EaseOutQuad
#   - EaseOutCubic
#   - EaseOutQuart
#   - EaseOutQuint
#   - EaseOutExpo
#   - EaseOutCirc
#   - Linear
#
# Specifying a `duration` of `0` will disable the visual bell.
bell:
  animation: EaseOutExpo
  duration: 0
  color: '#ffffff'

#selection:
  #semantic_escape_chars: ",│`|:\"' ()[]{{}}<>\t"

  # When set to `true`, selected text will be copied to the primary clipboard.
  #save_to_clipboard: false

cursor:
  # Values for `style`:
  #   - ▇ Block
  #   - _ Underline
  #   - | Beam
  style: Block

  unfocused_hollow: true

live_config_reload: true

# Shell
#
# You can set `shell.program` to the path of your favorite shell, e.g. `/bin/fish`.
# Entries in `shell.args` are passed unmodified as arguments to the shell.
#
# Default:
#   - (Linux/BSD) user login shell
shell:
  program: /bin/zsh
  args:
    - --login

# Startup directory
#
# Directory the shell is started in. If this is unset, or `None`, the working
# directory of the parent process will be used.
#working_directory: None

# Send ESC (\x1b) before characters when alt is pressed.
#alt_send_esc: true

#mouse:
  # Click settings
  #
  # The `double_click` and `triple_click` settings control the time
  # alacritty should wait for accepting multiple clicks as one double
  # or triple click.
  #double_click: {{ threshold: 300 }}
  #triple_click: {{ threshold: 300 }}

  # If this is `true`, the cursor is temporarily hidden when typing.
  #hide_when_typing: false

  #url:
    # URL launcher
    #
    # This program is executed when clicking on a text which is recognized as a URL.
    # The URL is always added to the command as the last parameter.
    #
    # When set to `None`, URL launching will be disabled completely.
    #
    # Default:
    #   - (Linux/BSD) xdg-open
    #launcher:
    #  program: xdg-open
    #  args: []

    # URL modifiers
    #
    # These are the modifiers that need to be held down for opening URLs when clicking
    # on them. The available modifiers are documented in the key binding section.
    #modifiers: None

# Mouse bindings
#
# Mouse bindings are specified as a list of objects, much like the key
# bindings further below.
#
# To trigger mouse bindings when an application running within Alacritty captures the mouse, the
# `Shift` modifier is automatically added as a requirement.
#
# Each mouse binding will specify a:
#
# - `mouse`:
#
#   - Middle
#   - Left
#   - Right
#   - Numeric identifier such as `5`
#
# - `action` (see key bindings)
#
# And optionally:
#
# - `mods` (see key bindings)
#mouse_bindings:
#  - {{ mouse: Middle, action: PasteSelection }}

# Key bindings
#
# Key bindings are specified as a list of objects. For example, this is the
# default paste binding:
#
# `- {{ key: V, mods: Control|Shift, action: Paste }}`
#
# Each key binding will specify a:
#
# - `key`: Identifier of the key pressed
#
#    - A-Z
#    - F1-F24
#    - Key0-Key9
#
#    A full list with available key codes can be found here:
#    https://docs.rs/glutin/*/glutin/event/enum.VirtualKeyCode.html#variants
#
#    Instead of using the name of the keys, the `key` field also supports using
#    the scancode of the desired key. Scancodes have to be specified as a
#    decimal number. This command will allow you to display the hex scancodes
#    for certain keys:
#
#       `showkey --scancodes`.
#
# Then exactly one of:
#
# - `chars`: Send a byte sequence to the running application
#
#    The `chars` field writes the specified string to the terminal. This makes
#    it possible to pass escape sequences. To find escape codes for bindings
#    like `PageUp` (`"\x1b[5~"`), you can run the command `showkey -a` outside
#    of tmux. Note that applications use terminfo to map escape sequences back
#    to keys. It is therefore required to update the terminfo when changing an
#    escape sequence.
#
# - `action`: Execute a predefined action
#
#   - Copy
#   - Paste
#   - PasteSelection
#   - IncreaseFontSize
#   - DecreaseFontSize
#   - ResetFontSize
#   - ScrollPageUp
#   - ScrollPageDown
#   - ScrollLineUp
#   - ScrollLineDown
#   - ScrollToTop
#   - ScrollToBottom
#   - ClearHistory
#   - Hide
#   - Minimize
#   - Quit
#   - ToggleFullscreen
#   - SpawnNewInstance
#   - ClearLogNotice
#   - ReceiveChar
#   - None
#
# - `command`: Fork and execute a specified command plus arguments
#
#    The `command` field must be a map containing a `program` string and an
#    `args` array of command line parameter strings. For example:
#       `{{ program: "alacritty", args: ["-e", "vttest"] }}`
#
# And optionally:
#
# - `mods`: Key modifiers to filter binding actions
#
#    - Command
#    - Control
#    - Option
#    - Super
#    - Shift
#    - Alt
#
#    Multiple `mods` can be combined using `|` like this:
#       `mods: Control|Shift`.
#    Whitespace and capitalization are relevant and must match the example.
#
# - `mode`: Indicate a binding for only specific terminal reported modes
#
#    This is mainly used to send applications the correct escape sequences
#    when in different modes.
#
#    - AppCursor
#    - AppKeypad
#    - Alt
#
#    A `~` operator can be used before a mode to apply the binding whenever
#    the mode is *not* active, e.g. `~Alt`.
#
# Bindings are always filled by default, but will be replaced when a new
# binding with the same triggers is defined. To unset a default binding, it can
# be mapped to the `ReceiveChar` action. Alternatively, you can use `None` for
# a no-op if you do not wish to receive input characters for that binding.
#
# If the same trigger is assigned to multiple actions, all of them are executed
# at once.
key_bindings:
  - {{ key: V,        mods: Control|Shift, action: Paste            }}
  - {{ key: C,        mods: Control|Shift, action: Copy             }}
  - {{ key: Insert,   mods: Shift,         action: PasteSelection   }}
  - {{ key: Key0,     mods: Control,       action: ResetFontSize    }}
  - {{ key: Equals,   mods: Control,       action: IncreaseFontSize }}
  - {{ key: Add,      mods: Control,       action: IncreaseFontSize }}
  - {{ key: Subtract, mods: Control,       action: DecreaseFontSize }}
  - {{ key: Minus,    mods: Control,       action: DecreaseFontSize }}

  - {{ key: Paste,                    action: Paste                            }}
  - {{ key: Copy,                     action: Copy                             }}
  - {{ key: L,         mods: Control, action: ClearLogNotice                   }}
  - {{ key: L,         mods: Control, chars: "\x0c"                            }}
  - {{ key: PageUp,    mods: Shift,   action: ScrollPageUp,   mode: ~Alt       }}
  - {{ key: PageDown,  mods: Shift,   action: ScrollPageDown, mode: ~Alt       }}
  - {{ key: Home,      mods: Shift,   action: ScrollToTop,    mode: ~Alt       }}
  - {{ key: End,       mods: Shift,   action: ScrollToBottom, mode: ~Alt       }}
