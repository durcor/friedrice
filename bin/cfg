#!/bin/sh
# shellcheck disable=1090,1091,2154
# TODO:
#       Fix editcfg() for cases when neovim-remote is used

. "${XDG_CACHE_HOME:-$HOME/.cache}/wal/colors.sh"

[ -f "${XDG_CONFIG_HOME:-$HOME/.config}/cfg/al" ] || {
	mkdir -p "${XDG_CONFIG_HOME:-$HOME/.config}/cfg"
	touch "${XDG_CONFIG_HOME:-$HOME/.config}/cfg/al"
}

fork_exec() {
	setsid >/dev/null nohup "$@"
}

chk_cmd() {
	command -v "$1" >/dev/null 2>&1 || {
		echo "Error: $1 not installed. It is required for $2 support." >&2
		exit 1
	}
}

initial_setup() {
	set -e
	case $(lsb_release -is) in
	"Arch")
		chk_cmd paru "AUR"
		paru -S "$(cat ~/.config/pkgs)"
		;;
	"Debian" | "Ubuntu") # FIXME: This probably fails horribly
		sudo apt install "$(cat ~/.config/pkgs)"
		;;
	*)
		echo >&2 "Error: Unsupported distribution. Please file an issue at https://github.com/durcor/friedrice. Thank you!"
		;;
	esac

	cfg_dir=${XDG_CONFIG_HOME-$HOME/.config}
	template_dir=$cfg_dir/wpg/templates

	ln -s "$template_dir/alacritty" "$cfg_dir/alacritty/alacritty.yml"
	ln -s "$template_dir/dmenu" "$HOME/src/dmenu/config.h"
	ln -s "$template_dir/dunst" "$cfg_dir/dunst/dunstrc"
	ln -s "$template_dir/foot" "$cfg_dir/foot/foot.ini"
	ln -s "$template_dir/i3" "$cfg_dir/i3/config"
	ln -s "$template_dir/i3blocks" "$cfg_dir/i3blocks/config"
	ln -s "$template_dir/kitty" "$cfg_dir/kitty/kitty.conf"
	ln -s "$template_dir/mako" "$cfg_dir/mako/config"
	ln -s "$template_dir/mangohud" "$cfg_dir/MangoHud/MangoHud.conf"
	ln -s "$template_dir/mpv" "$cfg_dir/mpv/mpv.conf"
	ln -s "$template_dir/qutebrowser" "$cfg_dir/qutebrowser/appearance.py"
	ln -s "$template_dir/rofi" "$cfg_dir/rofi/config"
	ln -s "$template_dir/slock" "$HOME/src/slock/config.h"
	ln -s "$template_dir/st" "$HOME/src/st/config.h"
	ln -s "$template_dir/sway" "$cfg_dir/sway/config"
	ln -s "$template_dir/tridactyl" "$cfg_dir/tridactyl/tridactylrc"
	ln -s "$template_dir/wayst" "$cfg_dir/wayst/config"
	ln -s "$template_dir/Xresources" "$HOME/.Xresources"
}

refreshcfg() {
	connected_usb_devices=$(lsusb)
	wpg -s "$(wpg -c)"

	# Use OpenRGB's generic RGB peripheral interface to rice some hardware
	# NOTE: This is hard-coded for my setup, so your command parameters WILL
	# vary, provided that you have openrgb installed
	# 0: RAM Stick 1
	# 1: RAM Stick 2
	# 2: RAM Stick 3
	# 3: RAM Stick 4
	# 4: NZXT Controller
	# 5: Keyboard
	# 6: AMD Wraith Prism
	# 7: Razer DeathAdder Elite
	command -v openrgb >/dev/null 2>&1 &&
		openrgb \
			-d 0 -c "${color14##\#}" -m Static \
			-d 1 -c "${color9##\#}" -m Static \
			-d 2 -c "${color12##\#}" -m Static \
			-d 3 -c "${color11##\#}" -m Static

	# Coloring NZXT fans
	echo "$connected_usb_devices" | grep -q NZXT && {
		chk_cmd liquidctl "NZXT fan control"
		liquidctl initialize all
		for fan in fan1 fan2 fan3; do
			liquidctl set $fan speed 25
		done
		liquidctl --speed fastest set sync color fading \
			"${color13##\#}" "${color14##\#}" "${color11##\#}" "${color12##\#}"
	}

	# Coloring the AMD Wraith Prism cooler
	echo "$connected_usb_devices" | grep -q AMD && {
		chk_cmd wraith-master "AMD Wraith Prism cooler"
		wraith-master -m swirl -c "$color14" ring
		wraith-master -m static -c "$color11" logo
		wraith-master --mirage on fan
		wraith-master -c "$color9" fan
	}

	# Rice all connected razer devices
	echo "$connected_usb_devices" | grep -q Razer && razerricer
	pgrep qutebrowser && qutebrowser :config-source

	# Rice any RGB keyboards using Microdia's microcontroller
	echo "$connected_usb_devices" | grep -q Microdia &&
		rgb_keyboard --custom-pattern \
			"${XDG_CONFIG_HOME-$HOME/.config}/wpg/templates/gmmk"

	sleep 0.1

	# Refresh window manager in use
	if [ "$WAYLAND_DISPLAY" ]; then
		sway restart
	else
		rfkb
		i3 restart
	fi

	# Recompile all suckless utilities in use
	cd ~/src/st && sudo make clean install || exit 1
	# cd ~/src/dmenu && sudo make clean install || exit 1
	cd ~/src/slock && sudo make clean install || exit 1

	# Rice and refresh Steam
	chk_cmd wal_steam "Steam color scheme configuration"
	wal_steam -w
	pgrep steam && {
		killall -9 steam
		sleep 5
		fork_exec steam-native
	}

	# pgrep nm-applet && {
	# killall -9 nm-applet
	# sleep 5
	# fork_exec nm-applet
	# }

	# Rice Firefox
	pgrep "$GUIBROWSER" || fork_exec "$GUIBROWSER"
	chk_cmd pywalfox "Firefox color scheme configuration"
	pywalfox update
	# Rice Zathura
	command -v zathura >/dev/null 2>&1 && {
		zathura_cfg_dir="${XDG_CONFIG_HOME-$HOME/.config}/zathura"
		if [ -e "$zathura_cfg_dir/myzathurarc" ]; then
			cat "$zathura_cfg_dir/myzathurarc" >"$zathura_cfg_dir/zathurarc"
		else
			cat "$zathura_cfg_dir/zathurarc" >"$zathura_cfg_dir/myzathurarc"
		fi
		"$HOME/src/Zathura-Pywal/genzathurarc" >>"$zathura_cfg_dir/zathurarc"
	}
	# Rice GTK/QT applications
	oomox-cli "${XDG_CACHE_HOME-$HOME/.cache}/wal/colors-oomox"
	# Rice Discord
	chk_cmd pywal-discord "Discord color scheme configuration"
	pywal-discord -t default
	pywal-discord -t abou
	pgrep Discord || fork_exec discord
	pgrep mako && (
		killall -9 mako
		fork_exec mako
	)
	pgrep dunst && (
		killall -9 dunst
		fork_exec dunst
	)

	beautifuldiscord --css "${XDG_CONFIG_HOME-$HOME/.config}/BetterDiscord/themes/pywal-discord-default.theme.css"

	# Rice Spotify
	oomoxify-cli -f "mononoki Nerd Font" -s /opt/spotify/Apps "${XDG_CACHE_HOME-$HOME/.cache}/wal/colors-oomox"
	# if pgrep spotify; then
	#     spicetify apply
	#     sleep 1
	#     playerctl -p spotify play
	# else
	#     spicetify apply
	#     sleep 1
	#     killall -9 spotify
	# fi
}

addcfg() {
	if [ ! "$3" ]; then
		echo "You can't add a config without an alias/path!"
		exit
	fi
	cfgalias=$3
	newcfg=$(readlink -f "$2")
	echo "$cfgalias $newcfg" >>"$XDG_CONFIG_HOME/cfg/al"
}

editcfg() {
	if [ -z "$2" ]; then
		# If the user quits out of fzf, exit cfg immediately
		cfgfileloc="$(sed "s|~|/home/$USER|" "$XDG_CONFIG_HOME/cfg/al" |
			awk '{print $2}' | fzf)" || exit 1
	else
		cfgfileloc="$(sed "s|~|/home/$USER|" "$XDG_CONFIG_HOME/cfg/al" |
			grep "^$2 " | awk '{print $2}')"
	fi

	cfgfilepostrun="$(grep "$(echo "$cfgfileloc" | sed "s|/home/$USER|~|")" "$XDG_CONFIG_HOME/cfg/al" | awk '{$1="";$2="";print}' | xargs)"

	# Only advance onto the post run command if the edit of the
	# file succeeds
	# (ie. sudoedit without doing any actual editing or
	# editing a file that is already open in another instance)
	edit "$cfgfileloc" &&

		# updatecfg
		[ -n "$cfgfilepostrun" ] && $SHELL -c "$cfgfilepostrun"
}

listcfg() {
	awk '{print $1 ; print $2}' "$XDG_CONFIG_HOME/cfg/al"
}

updatecfg() {
	uname=$(id -nu)
	gname=$(id -ng)
	cp /etc/pacman.conf "$XDG_CONFIG_HOME/root/etc/" || exit 1
	cp /etc/makepkg.conf "$XDG_CONFIG_HOME/root/etc/" || exit 1
	cp /etc/sysctl.d -r "$XDG_CONFIG_HOME/root/etc/" || exit 1
	cp /etc/bluetooth -r "$XDG_CONFIG_HOME/root/etc/" || exit 1
	cp /etc/locale.gen "$XDG_CONFIG_HOME/root/etc/" || exit 1
	sudo cp /etc/sudoers "$XDG_CONFIG_HOME/root/etc/" &&
		sudo chown -R "$uname:$gname" "$XDG_CONFIG_HOME/root" || exit 1
	cp /etc/profile "$XDG_CONFIG_HOME/root/etc/" || exit 1
	git add -f "$XDG_CONFIG_HOME/root"

	git add -f ~/bin
	git add -f "$XDG_CONFIG_HOME/wpg/templates/*.base"
	pacman -Qeq >"$XDG_CONFIG_HOME/pkgs"
	git add -f "$XDG_CONFIG_HOME/pkgs"
}

deletecfg() {
	path_to_del="$(fzf <"${XDG_CONFIG_HOME:-$HOME/.config}/cfg/al" | awk '{print $2}')"
	rm -i "$path_to_del" && sed -i "/$2/d"
}

case $1 in
r | rf | re | refresh)
	refreshcfg
	;;
a | add)
	addcfg "$@"
	;;
e | ed | edit)
	editcfg "$@"
	;;
l | ls | list)
	listcfg
	;;
u | up | update)
	updatecfg
	;;
x | d | del | delete | rm)
	deletecfg "$@"
	;;
s | setup)
	initial_setup
	;;
*)
	echo "\
cfg - the simple config controller

    r/rf/refresh - refresh all configs
        - cfg r

    a/add - add new config
        - cfg a (PATH TO CONFIG) (CONFIG ALIAS)

    e/ed/edit - edit existing config
        - cfg e
            - calls fzf
            OR
        - cfg e (CONFIG ALIAS)

    l/ls/list - list existing config aliases
        - cfg l

    u/up/update - push to your main repo
        - cfg u

    x/d/rm/delete - delete a config file
    - cfg x
        - calls fzf
"
	;;
esac
