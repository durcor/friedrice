#!/bin/sh
# shellcheck disable=1090,2154
# TODO:
#       Fix editcfg() for cases when neovim-remote is used

. "${XDG_CACHE_HOME-$HOME/.cache}/wal/colors.sh"

[ ! -f "${XDG_CONFIG_HOME-$HOME/.config}/cfg/al" ] && {
    mkdir -p "${XDG_CONFIG_HOME-$HOME/.config}/cfg"
    touch "${XDG_CONFIG_HOME-$HOME/.config}/cfg/al"
}

refreshcfg()
{
    connected_usb_devices=$(lsusb)
    wpg -s "$(wpg -c)"

    # Use OpenRGB's generic RGB peripheral interface to rice some hardware
    # 0: Left RAM Stick
    # 1: Right RAM Stick
    # 2: X570 Taichi
    # 3: NZXT Controller
    # 4: AMD Wraith Prism
    # 5: Razer Huntsman Elite
    # 6: Razer DeathAdder Elite
    # 7: Razer Goliathus Extended
    command -v openrgb >/dev/null &&
        openrgb \
        -d 0 -c "${color14##\#}" -m Static \
        -d 1 -c "${color9##\#}" -m Static \
        -d 2 -c "${color9##\#}" -m Neon

    # Coloring NZXT fans
    echo "$connected_usb_devices" | grep -q NZXT && {
        liquidctl initialize all
        for fan in fan1 fan2 fan3; do
            liquidctl set $fan speed 25; done
        liquidctl --speed fastest set sync color fading \
            "${color13##\#}" "${color14##\#}" "${color11##\#}" "${color12##\#}"
    }

    # Coloring the AMD Wraith Prism cooler
    echo "$connected_usb_devices" | grep -q AMD && {
        wraith-master -m swirl -c "$color14" ring
        wraith-master -m static -c "$color11" logo
        wraith-master --mirage on fan
        wraith-master -c "$color9" fan
    }

    # Rice all connected razer devices
    echo "$connected_usb_devices" | grep -q Razer && razerricer
    pgrep qutebrowser && qutebrowser :config-source

    # Rice any RGB keyboards using Microdia's microcontroller
    echo "$connected_usb_devices" | grep -q Microdia &&
        rgb_keyboard --custom-pattern \
        "${XDG_CONFIG_HOME-$HOME/.config}/wpg/templates/gmmk"

    sleep 0.1

    # Refresh window manager in use
    { [ "$WAYLAND_DISPLAY" ] && sway restart; } || { rfkb; i3 restart; }

    # Recompile all suckless utilities in use
    cd ~/src/st && sudo make clean install || exit 1
    # cd ~/src/dmenu && sudo make clean install || exit 1
    cd ~/src/slock && sudo make clean install || exit 1

    # Rice and refresh Steam
    wal_steam -w
    pgrep steam && {
		killall -9 steam
		sleep 5
		setsid steam-native
	}

    # pgrep nm-applet && {
		# killall -9 nm-applet
		# sleep 5
		# setsid nm-applet
	# }

    # Rice Firefox
	! pgrep firefox &&
		setsid firefox-nightly
    pywalfox update
    # Rice Zathura
    command -v zathura >/dev/null 2>&1 && {
        zathura_cfg_dir="${XDG_CONFIG_HOME-$HOME/.config}/zathura"
        if [ -e "$zathura_cfg_dir/myzathurarc" ]; then
            cat "$zathura_cfg_dir/myzathurarc" > "$zathura_cfg_dir/zathurarc"
        else
            cat "$zathura_cfg_dir/zathurarc" > "$zathura_cfg_dir/myzathurarc"
        fi
        "$HOME/src/Zathura-Pywal/genzathurarc" >> "$zathura_cfg_dir/zathurarc"
    }
    # Rice GTK/QT applications
    oomox-cli "${XDG_CACHE_HOME-$HOME/.cache}/wal/colors-oomox"
    # Rice Discord
    pywal-discord -t default
    pywal-discord -t abou
	! pgrep Discord &&
		setsid discord

	beautifuldiscord --css "${XDG_CONFIG_HOME-$HOME/.config}/BetterDiscord/themes/pywal-discord-default.theme.css"

    # Rice Spotify
    oomoxify-cli -f "mononoki Nerd Font" -s /opt/spotify/Apps "${XDG_CACHE_HOME-$HOME/.cache}/wal/colors-oomox"
    # if pgrep spotify; then
    #     spicetify apply
    #     sleep 1
    #     playerctl -p spotify play
    # else
    #     spicetify apply
    #     sleep 1
    #     killall -9 spotify
    # fi
}


addcfg()
{
    if [ ! "$3" ]; then
        echo "You can't add a config without an alias/path!"
        exit
    fi
    cfgalias=$3
    newcfg=$(readlink -f "$2")
    echo "$cfgalias $newcfg" >> "$XDG_CONFIG_HOME/cfg/al"
}

editcfg()
{
    if [ -z "$2"  ]; then
        # If the user quits out of fzf, exit cfg immediately
        cfgfileloc="$(sed "s|~|/home/$USER|" "$XDG_CONFIG_HOME/cfg/al" |
            awk '{print $2}' | fzf)" || exit 1
    else
        cfgfileloc="$(sed "s|~|/home/$USER|" "$XDG_CONFIG_HOME/cfg/al" |
            grep "^$2 " | awk '{print $2}')"
    fi

    cfgfilepostrun="$(grep "$(echo "$cfgfileloc" | sed "s|/home/$USER|~|")" "$XDG_CONFIG_HOME/cfg/al" | awk '{$1="";$2="";print}' | xargs)"

    # Only advance onto the post run command if the edit of the
    # file succeeds
    # (ie. sudoedit without doing any actual editing or
    # editing a file that is already open in another instance)
    edit "$cfgfileloc" &&

    # updatecfg

    [ -n "$cfgfilepostrun" ] && $SHELL -c "$cfgfilepostrun"
}

listcfg()
{
    awk '{print $1 ; print $2}' "$XDG_CONFIG_HOME/cfg/al"
}

updatecfg()
{
    cp /etc/pacman.conf "$XDG_CONFIG_HOME/root/etc/" || exit 1
    cp /etc/makepkg.conf "$XDG_CONFIG_HOME/root/etc/" || exit 1
    cp /etc/pulse/default.pa "$XDG_CONFIG_HOME/root/etc/pulse/" || exit 1
    cp /etc/sysctl.d -r "$XDG_CONFIG_HOME/root/etc/" || exit 1
    cp /etc/bluetooth -r "$XDG_CONFIG_HOME/root/etc/" || exit 1
    cp /etc/locale.gen "$XDG_CONFIG_HOME/root/etc/" || exit 1
    sudo cp /etc/sudoers "$XDG_CONFIG_HOME/root/etc/" &&
    sudo chown -R "$USER":users "$XDG_CONFIG_HOME/root" || exit 1
    cp /etc/hostname "$XDG_CONFIG_HOME/root/etc/" || exit 1
    cp /etc/profile "$XDG_CONFIG_HOME/root/etc/" || exit 1
    git add -f "$XDG_CONFIG_HOME/root"

    git add -f ~/bin
    git add -f "$XDG_CONFIG_HOME/wpg/templates/*.base"
    pacman -Qeq > "$XDG_CONFIG_HOME/pkgs"
}

deletecfg()
{
    path_to_del="$(fzf < "${XDG_CONFIG_HOME-$HOME/.config}/cfg/al" | awk '{print $2}')"
    rm -i "$path_to_del" && sed -i "/$2/d"
}

case $1 in
    r|rf|re|refresh)
        refreshcfg
        ;;
    a|add)
        addcfg "$@"
        ;;
    e|ed|edit)
        editcfg "$@"
        ;;
    l|ls|list)
        listcfg
        ;;
    u|up|update)
        updatecfg
        ;;
    x|d|del|delete|rm)
        deletecfg "$@"
        ;;
    *)
        echo "\
cfg - the simple config controller

    r/rf/refresh - refresh all configs
        - cfg r

    a/add - add new config
        - cfg a (PATH TO CONFIG) (CONFIG ALIAS)

    e/ed/edit - edit existing config
        - cfg e
            - calls fzf
            OR
        - cfg e (CONFIG ALIAS)

    l/ls/list - list existing config aliases
        - cfg l

    l/ls/list - list existing config aliases
        - cfg l

    u/up/update - push to your main repo
        - cfg u

    x/d/rm/delete - delete a config file
    - cfg x
        - calls fzf
"
        ;;
esac
