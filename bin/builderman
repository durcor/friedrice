#!/bin/sh
# shellcheck disable=2016
# DEPENDENCIES
# 	NECESSARY:
# 		- POSIX stuff
# 		- git
# 		- Arch-based system (makepkg)
# 		- fzf (if pkgbuild name not specified)
# 			TODO fall back to read
# 	OPTIONAL:
# 		- fd (falls back to find)
# TODO
# 	Move each new added PKGBUILD to a git submodule that is a part of a user's dotfile repo

# TODO
# 	Nullify the PKGBUILD directory and ask for a user's input the first time builderman is run

PKGBUILD_DIR="$HOME/src/pkgbuild"

GAME_DIRS="$HOME/gam $HOME/data/gam"

# set -e

if command -v fd >/dev/null; then
	finder(){ fd -IHL '^.git$' . ;}
else
	finder(){ find . -type d -name '.git' ;}
fi

updatepkgbuilds()
{
	cd "$PKGBUILD_DIR" || exit 1

	for d in $(finder | grep -v 'subprojects\|src' | sed 's|/.git||'); do
        cd "$d" || exit 1
		! ls Makefile* >/dev/null 2>&1 && ! ls BUILD* >/dev/null 2>&1 && {
			if pull_status=$(git pull --recurse-submodules 2>&1); then
			    pull_status="$(tput setaf 10)$pull_status$(tput sgr0)"
			else
			    pull_status="$(tput setaf 9)$pull_status$(tput sgr0)"
			fi
			echo "$(tput bold; tput setaf 12)$d$(tput sgr0): $pull_status"
		}
		cd "$PKGBUILD_DIR" || exit 1
    done
}

rebuild_pkg(){
	rm ./*.pkg.*
	yes | makepkg -sif
}

updategfx()
{
	builderman i mesa
	cd "$PKGBUILD_DIR/wine/dxvk-tools"
	./updxvk build
	./upvkd3d-proton build
}

updatewine()
{
    # TODO:
    # Add support for building DXVK with LTO
	cd "$PKGBUILD_DIR"/wine/dxvk-tools
	./updxvk build
	./updxvk proton-dist
	./updxvk proton-tkg
	./updxvk lutris
	./upvkd3d-proton build
	./upvkd3d-proton proton-dist
	cd "$PKGBUILD_DIR"/wine/wine-tkg-git/wine-tkg-git
	rebuild_pkg
	cd "$PKGBUILD_DIR"/wine/wine-tkg-git/proton-tkg
	rebuild_pkg
	cd "$PKGBUILD_DIR"/wine/dxvk-tools
	./updxvk ~/.wine

	for i in $GAME_DIRS; do
		PREFIXES_ROOT="$i/wine" ./updxvk batch
	done
	PREFIXES_ROOT="$HOME/gam/wine" ./updxvk batch
	PREFIXES_ROOT="$HOME/data/gam/wine" ./updxvk batch
	PREFIXES_ROOT="$HOME/.local/share/wineprefixes" ./updxvk batch
}

case $1 in
	sync|s)
		updatepkgbuilds
		;;
	install|i)
		case $2 in
			wine)
                updatewine
                ;;
			gfx)
                updategfx
                ;;
            *)
                cd "$PKGBUILD_DIR" || exit
                if [ -z "$2" ]; then
                    collector_program="fzf"
                else
                    collector_program="grep $2$"
                fi
                pkg_to_rebuild=$(finder | sed 's|/.git||' | $collector_program)
                [ -z "$pkg_to_rebuild" ] && exit 1
                cd "$pkg_to_rebuild" || exit 1
                rebuild_pkg
                ;;
        esac
        ;;
    *)
        echo "Only valid options are sync and install" && exit 1
        ;;
esac
